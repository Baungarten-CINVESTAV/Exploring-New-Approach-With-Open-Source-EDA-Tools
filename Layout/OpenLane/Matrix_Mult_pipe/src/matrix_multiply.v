// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

//`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_multiply,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=68609,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=120,HLS_SYN_LUT=293,HLS_VERSION=2019_1}" *)
module matrix_multiply (
`ifdef USE_POWER_PINS
    VPWR,
    VGND,
`endif
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_0_address0,
        A_0_ce0,
        A_0_q0,
        A_1_address0,
        A_1_ce0,
        A_1_q0,
        A_2_address0,
        A_2_ce0,
        A_2_q0,
        A_3_address0,
        A_3_ce0,
        A_3_q0,
        B_0_address0,
        B_0_ce0,
        B_0_q0,
        B_1_address0,
        B_1_ce0,
        B_1_q0,
        B_2_address0,
        B_2_ce0,
        B_2_q0,
        B_3_address0,
        B_3_ce0,
        B_3_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_pp0_stage1 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;


`ifdef USE_POWER_PINS
   inout VPWR;
   inout VGND;
`endif

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] A_0_address0;
output   A_0_ce0;
input  [15:0] A_0_q0;
output  [7:0] A_1_address0;
output   A_1_ce0;
input  [15:0] A_1_q0;
output  [7:0] A_2_address0;
output   A_2_ce0;
input  [15:0] A_2_q0;
output  [7:0] A_3_address0;
output   A_3_ce0;
input  [15:0] A_3_q0;
output  [7:0] B_0_address0;
output   B_0_ce0;
input  [15:0] B_0_q0;
output  [7:0] B_1_address0;
output   B_1_ce0;
input  [15:0] B_1_q0;
output  [7:0] B_2_address0;
output   B_2_ce0;
input  [15:0] B_2_q0;
output  [7:0] B_3_address0;
output   B_3_ce0;
input  [15:0] B_3_q0;
output  [9:0] C_address0;
output   C_ce0;
output   C_we0;
output  [15:0] C_d0;
input  [15:0] C_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_0_ce0;
reg A_1_ce0;
reg A_2_ce0;
reg A_3_ce0;
reg B_0_ce0;
reg B_1_ce0;
reg B_2_ce0;
reg B_3_ce0;
reg[9:0] C_address0;
reg C_ce0;
reg C_we0;
reg[15:0] C_d0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] k_0_reg_227;
wire   [0:0] icmp_ln16_fu_238_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] add_ln16_fu_244_p2;
reg   [10:0] add_ln16_reg_439;
wire   [5:0] select_ln22_fu_262_p3;
reg   [5:0] select_ln22_reg_444;
wire   [5:0] select_ln22_1_fu_270_p3;
reg   [5:0] select_ln22_1_reg_449;
wire   [31:0] zext_ln22_1_fu_300_p1;
reg   [31:0] zext_ln22_1_reg_454;
wire   [8:0] zext_ln22_2_fu_316_p1;
reg   [8:0] zext_ln22_2_reg_459;
reg   [9:0] C_addr_reg_464;
wire   [31:0] zext_ln28_fu_345_p1;
reg   [31:0] zext_ln28_reg_469;
wire   [2:0] trunc_ln28_1_fu_349_p1;
reg   [2:0] trunc_ln28_1_reg_474;
wire   [0:0] icmp_ln25_fu_353_p2;
reg   [0:0] icmp_ln25_reg_479;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] k_fu_359_p2;
reg   [5:0] k_reg_483;
reg    ap_enable_reg_pp0_iter0;
wire  signed [15:0] tmp_1_fu_397_p6;
reg  signed [15:0] tmp_1_reg_528;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire  signed [15:0] tmp_2_fu_410_p6;
reg  signed [15:0] tmp_2_reg_533;
wire   [5:0] j_fu_423_p2;
wire    ap_CS_fsm_state6;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [10:0] indvar_flatten_reg_194;
reg   [5:0] i_0_reg_205;
reg   [5:0] j_0_reg_216;
reg   [5:0] ap_phi_mux_k_0_phi_fu_231_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln22_4_fu_330_p1;
wire   [63:0] zext_ln28_2_fu_374_p1;
wire   [63:0] zext_ln28_3_fu_389_p1;
wire    ap_block_pp0_stage1;
wire  signed [15:0] grp_fu_428_p3;
wire   [0:0] icmp_ln19_fu_256_p2;
wire   [5:0] i_fu_250_p2;
wire   [10:0] tmp_3_fu_278_p3;
wire   [2:0] zext_ln28_3_mid2_v_fu_290_p4;
wire   [2:0] trunc_ln28_fu_304_p1;
wire   [7:0] tmp_5_fu_308_p3;
wire   [11:0] zext_ln22_fu_286_p1;
wire   [11:0] zext_ln22_3_fu_320_p1;
wire   [11:0] add_ln22_fu_324_p2;
wire   [2:0] lshr_ln28_1_fu_335_p4;
wire   [8:0] zext_ln28_1_fu_365_p1;
wire   [8:0] add_ln28_1_fu_369_p2;
wire   [8:0] tmp_6_fu_382_p3;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization

initial begin
 ap_CS_fsm = 5'd1;
 ap_enable_reg_pp0_iter0 = 1'b0;
 ap_enable_reg_pp0_iter1 = 1'b0;
end

matrix_multiply_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
matrix_multiply_mbkb_U1(
    .din0(A_0_q0),
    .din1(A_1_q0),
    .din2(A_2_q0),
    .din3(A_3_q0),
    .din4(zext_ln22_1_reg_454),
    .dout(tmp_1_fu_397_p6)
);

matrix_multiply_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
matrix_multiply_mbkb_U2(
    .din0(B_0_q0),
    .din1(B_1_q0),
    .din2(B_2_q0),
    .din3(B_3_q0),
    .din4(zext_ln28_reg_469),
    .dout(tmp_2_fu_410_p6)
);

matrix_multiply_mcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrix_multiply_mcud_U3(
    .din0(tmp_1_reg_528),
    .din1(tmp_2_reg_533),
    .din2(C_q0),
    .dout(grp_fu_428_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln16_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln16_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_reg_205 <= select_ln22_1_reg_449;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_205 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten_reg_194 <= add_ln16_reg_439;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_194 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_reg_216 <= j_fu_423_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_216 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_0_reg_227 <= k_reg_483;
    end else if (((icmp_ln16_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_reg_227 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        C_addr_reg_464 <= zext_ln22_4_fu_330_p1;
        select_ln22_1_reg_449 <= select_ln22_1_fu_270_p3;
        select_ln22_reg_444 <= select_ln22_fu_262_p3;
        trunc_ln28_1_reg_474 <= trunc_ln28_1_fu_349_p1;
        zext_ln22_1_reg_454[2 : 0] <= zext_ln22_1_fu_300_p1[2 : 0];
        zext_ln22_2_reg_459[7 : 5] <= zext_ln22_2_fu_316_p1[7 : 5];
        zext_ln28_reg_469[2 : 0] <= zext_ln28_fu_345_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln16_reg_439 <= add_ln16_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln25_reg_479 <= icmp_ln25_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_reg_483 <= k_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_479 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_1_reg_528 <= tmp_1_fu_397_p6;
        tmp_2_reg_533 <= tmp_2_fu_410_p6;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_0_ce0 = 1'b1;
    end else begin
        A_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_1_ce0 = 1'b1;
    end else begin
        A_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_2_ce0 = 1'b1;
    end else begin
        A_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_3_ce0 = 1'b1;
    end else begin
        A_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_0_ce0 = 1'b1;
    end else begin
        B_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_1_ce0 = 1'b1;
    end else begin
        B_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_2_ce0 = 1'b1;
    end else begin
        B_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_3_ce0 = 1'b1;
    end else begin
        B_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        C_address0 = C_addr_reg_464;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        C_address0 = zext_ln22_4_fu_330_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        C_d0 = grp_fu_428_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        C_d0 = 16'd0;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln16_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln25_reg_479 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_353_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_k_0_phi_fu_231_p4 = k_reg_483;
    end else begin
        ap_phi_mux_k_0_phi_fu_231_p4 = k_0_reg_227;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln16_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_353_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_353_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_0_address0 = zext_ln28_2_fu_374_p1;

assign A_1_address0 = zext_ln28_2_fu_374_p1;

assign A_2_address0 = zext_ln28_2_fu_374_p1;

assign A_3_address0 = zext_ln28_2_fu_374_p1;

assign B_0_address0 = zext_ln28_3_fu_389_p1;

assign B_1_address0 = zext_ln28_3_fu_389_p1;

assign B_2_address0 = zext_ln28_3_fu_389_p1;

assign B_3_address0 = zext_ln28_3_fu_389_p1;

assign add_ln16_fu_244_p2 = (indvar_flatten_reg_194 + 11'd1);

assign add_ln22_fu_324_p2 = (zext_ln22_fu_286_p1 + zext_ln22_3_fu_320_p1);

assign add_ln28_1_fu_369_p2 = (zext_ln28_1_fu_365_p1 + zext_ln22_2_reg_459);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_250_p2 = (6'd1 + i_0_reg_205);

assign icmp_ln16_fu_238_p2 = ((indvar_flatten_reg_194 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_256_p2 = ((j_0_reg_216 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_353_p2 = ((ap_phi_mux_k_0_phi_fu_231_p4 == 6'd32) ? 1'b1 : 1'b0);

assign j_fu_423_p2 = (select_ln22_reg_444 + 6'd1);

assign k_fu_359_p2 = (ap_phi_mux_k_0_phi_fu_231_p4 + 6'd1);

assign lshr_ln28_1_fu_335_p4 = {{select_ln22_fu_262_p3[5:3]}};

assign select_ln22_1_fu_270_p3 = ((icmp_ln19_fu_256_p2[0:0] === 1'b1) ? i_fu_250_p2 : i_0_reg_205);

assign select_ln22_fu_262_p3 = ((icmp_ln19_fu_256_p2[0:0] === 1'b1) ? 6'd0 : j_0_reg_216);

assign tmp_3_fu_278_p3 = {{select_ln22_1_fu_270_p3}, {5'd0}};

assign tmp_5_fu_308_p3 = {{trunc_ln28_fu_304_p1}, {5'd0}};

assign tmp_6_fu_382_p3 = {{ap_phi_mux_k_0_phi_fu_231_p4}, {trunc_ln28_1_reg_474}};

assign trunc_ln28_1_fu_349_p1 = select_ln22_fu_262_p3[2:0];

assign trunc_ln28_fu_304_p1 = select_ln22_1_fu_270_p3[2:0];

assign zext_ln22_1_fu_300_p1 = zext_ln28_3_mid2_v_fu_290_p4;

assign zext_ln22_2_fu_316_p1 = tmp_5_fu_308_p3;

assign zext_ln22_3_fu_320_p1 = select_ln22_fu_262_p3;

assign zext_ln22_4_fu_330_p1 = add_ln22_fu_324_p2;

assign zext_ln22_fu_286_p1 = tmp_3_fu_278_p3;

assign zext_ln28_1_fu_365_p1 = ap_phi_mux_k_0_phi_fu_231_p4;

assign zext_ln28_2_fu_374_p1 = add_ln28_1_fu_369_p2;

assign zext_ln28_3_fu_389_p1 = tmp_6_fu_382_p3;

assign zext_ln28_3_mid2_v_fu_290_p4 = {{select_ln22_1_fu_270_p3[5:3]}};

assign zext_ln28_fu_345_p1 = lshr_ln28_1_fu_335_p4;

always @ (posedge ap_clk) begin
    zext_ln22_1_reg_454[31:3] <= 29'b00000000000000000000000000000;
    zext_ln22_2_reg_459[4:0] <= 5'b00000;
    zext_ln22_2_reg_459[8] <= 1'b0;
    zext_ln28_reg_469[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //matrix_multiply
