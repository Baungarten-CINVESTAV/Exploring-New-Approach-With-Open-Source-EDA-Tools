// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

//`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_transpose,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045-ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.230500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=136,HLS_SYN_LUT=116,HLS_VERSION=2019_1}" *)
module matrix_transpose (
	`ifdef USE_POWER_PINS
		VPWR,
		VGND,
	`endif
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mat_Addr_A,
        mat_EN_A,
        mat_WEN_A,
        mat_Din_A,
        mat_Dout_A,
        mat_Clk_A,
        mat_Rst_A,
        mat_Addr_B,
        mat_EN_B,
        mat_WEN_B,
        mat_Din_B,
        mat_Dout_B,
        mat_Clk_B,
        mat_Rst_B
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;


`ifdef USE_POWER_PINS
   inout VPWR;
   inout VGND;
`endif

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] mat_Addr_A;
output   mat_EN_A;
output  [3:0] mat_WEN_A;
output  [31:0] mat_Din_A;
input  [31:0] mat_Dout_A;
output   mat_Clk_A;
output   mat_Rst_A;
output  [31:0] mat_Addr_B;
output   mat_EN_B;
output  [3:0] mat_WEN_B;
output  [31:0] mat_Din_B;
input  [31:0] mat_Dout_B;
output   mat_Clk_B;
output   mat_Rst_B;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mat_EN_A;
reg[3:0] mat_WEN_A;
reg mat_EN_B;
reg[3:0] mat_WEN_B;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] zext_ln8_fu_87_p1;
wire    ap_CS_fsm_state2;
wire   [8:0] i_fu_97_p2;
reg   [8:0] i_reg_175;
wire   [17:0] zext_ln13_fu_103_p1;
reg   [17:0] zext_ln13_reg_180;
wire   [0:0] icmp_ln8_fu_91_p2;
wire   [17:0] zext_ln10_fu_115_p1;
reg   [17:0] zext_ln10_reg_185;
wire   [31:0] j_fu_119_p2;
reg   [31:0] j_reg_190;
wire    ap_CS_fsm_state3;
reg   [15:0] mat_addr_reg_198;
wire   [0:0] icmp_ln10_fu_125_p2;
reg   [15:0] mat_addr_1_reg_203;
reg   [8:0] i_0_reg_67;
reg   [31:0] j_0_in_reg_78;
wire    ap_CS_fsm_state4;
wire  signed [63:0] sext_ln13_fu_140_p1;
wire  signed [63:0] sext_ln14_fu_162_p1;
reg   [31:0] mat_Addr_A_orig;
reg   [31:0] mat_Addr_B_orig;
wire   [16:0] tmp_fu_107_p3;
wire   [17:0] trunc_ln13_fu_131_p1;
wire   [17:0] add_ln13_fu_135_p2;
wire   [9:0] trunc_ln14_fu_145_p1;
wire   [17:0] sext_ln14_cast_fu_149_p3;
wire   [17:0] add_ln14_fu_157_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_67 <= i_reg_175;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_67 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_in_reg_78 <= zext_ln8_fu_87_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_in_reg_78 <= j_reg_190;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_175 <= i_fu_97_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_190 <= j_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_125_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        mat_addr_1_reg_203 <= sext_ln14_fu_162_p1;
        mat_addr_reg_198 <= sext_ln13_fu_140_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln10_reg_185[16 : 8] <= zext_ln10_fu_115_p1[16 : 8];
        zext_ln13_reg_180[8 : 0] <= zext_ln13_fu_103_p1[8 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mat_Addr_A_orig = mat_addr_reg_198;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        mat_Addr_A_orig = sext_ln13_fu_140_p1;
    end else begin
        mat_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mat_Addr_B_orig = mat_addr_1_reg_203;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        mat_Addr_B_orig = sext_ln14_fu_162_p1;
    end else begin
        mat_Addr_B_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        mat_EN_A = 1'b1;
    end else begin
        mat_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        mat_EN_B = 1'b1;
    end else begin
        mat_EN_B = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mat_WEN_A = 4'd15;
    end else begin
        mat_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mat_WEN_B = 4'd15;
    end else begin
        mat_WEN_B = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln10_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_135_p2 = (zext_ln10_reg_185 + trunc_ln13_fu_131_p1);

assign add_ln14_fu_157_p2 = (sext_ln14_cast_fu_149_p3 + zext_ln13_reg_180);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign i_fu_97_p2 = (i_0_reg_67 + 9'd1);

assign icmp_ln10_fu_125_p2 = ((j_0_in_reg_78 == 32'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_91_p2 = ((i_0_reg_67 == 9'd256) ? 1'b1 : 1'b0);

assign j_fu_119_p2 = (j_0_in_reg_78 + 32'd1);

assign mat_Addr_A = mat_Addr_A_orig << 32'd2;

assign mat_Addr_B = mat_Addr_B_orig << 32'd2;

assign mat_Clk_A = ap_clk;

assign mat_Clk_B = ap_clk;

assign mat_Din_A = mat_Dout_B;

assign mat_Din_B = mat_Dout_A;

assign mat_Rst_A = ap_rst;

assign mat_Rst_B = ap_rst;

assign sext_ln13_fu_140_p1 = $signed(add_ln13_fu_135_p2);

assign sext_ln14_cast_fu_149_p3 = {{trunc_ln14_fu_145_p1}, {8'd0}};

assign sext_ln14_fu_162_p1 = $signed(add_ln14_fu_157_p2);

assign tmp_fu_107_p3 = {{i_0_reg_67}, {8'd0}};

assign trunc_ln13_fu_131_p1 = j_fu_119_p2[17:0];

assign trunc_ln14_fu_145_p1 = j_fu_119_p2[9:0];

assign zext_ln10_fu_115_p1 = tmp_fu_107_p3;

assign zext_ln13_fu_103_p1 = i_0_reg_67;

assign zext_ln8_fu_87_p1 = i_0_reg_67;

always @ (posedge ap_clk) begin
    zext_ln13_reg_180[17:9] <= 9'b000000000;
    zext_ln10_reg_185[7:0] <= 8'b00000000;
    zext_ln10_reg_185[17] <= 1'b0;
end

endmodule //matrix_transpose
