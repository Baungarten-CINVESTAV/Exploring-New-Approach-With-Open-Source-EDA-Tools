// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

//`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="core,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=2310,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=606,HLS_SYN_LUT=912,HLS_VERSION=2019_1}" *)

module core (
`ifdef USE_POWER_PINS
    VPWR,
    VGND,
`endif
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        c_address0,
        c_ce0,
        c_we0,
        c_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state8 = 3'd4;


`ifdef USE_POWER_PINS
   inout VPWR;
   inout VGND;
`endif

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [3:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [5:0] c_address0;
output   c_ce0;
output   c_we0;
output  [31:0] c_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg c_ce0;
reg c_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] indvar_flatten66_reg_149;
reg   [2:0] x_0_reg_160;
reg   [9:0] indvar_flatten26_reg_171;
reg   [2:0] y_0_reg_182;
reg   [7:0] indvar_flatten_reg_193;
reg   [3:0] j_0_reg_204;
reg   [31:0] aux_reg_215;
reg   [3:0] i_0_reg_227;
wire   [3:0] sub_ln14_fu_248_p2;
reg   [3:0] sub_ln14_reg_844;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_5_reg_849;
wire   [0:0] icmp_ln14_fu_262_p2;
reg   [0:0] icmp_ln14_reg_854;
wire   [0:0] icmp_ln6_fu_268_p2;
reg   [0:0] icmp_ln6_reg_859;
reg   [0:0] icmp_ln6_reg_859_pp0_iter1_reg;
reg   [0:0] icmp_ln6_reg_859_pp0_iter2_reg;
reg   [0:0] icmp_ln6_reg_859_pp0_iter3_reg;
reg   [0:0] icmp_ln6_reg_859_pp0_iter4_reg;
wire   [11:0] add_ln6_fu_274_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln7_fu_286_p2;
reg   [0:0] icmp_ln7_reg_868;
wire   [2:0] select_ln6_1_fu_300_p3;
reg   [2:0] select_ln6_1_reg_873;
wire   [2:0] select_ln6_2_fu_314_p3;
reg   [2:0] select_ln6_2_reg_879;
reg   [2:0] select_ln6_2_reg_879_pp0_iter1_reg;
reg   [2:0] select_ln6_2_reg_879_pp0_iter2_reg;
reg   [2:0] select_ln6_2_reg_879_pp0_iter3_reg;
reg   [2:0] select_ln6_2_reg_879_pp0_iter4_reg;
wire   [0:0] xor_ln6_fu_330_p2;
reg   [0:0] xor_ln6_reg_885;
wire   [0:0] icmp_ln14_1_fu_336_p2;
reg   [0:0] icmp_ln14_1_reg_892;
wire   [0:0] and_ln6_4_fu_360_p2;
reg   [0:0] and_ln6_4_reg_897;
wire   [2:0] y_fu_366_p2;
reg   [2:0] y_reg_903;
wire   [0:0] or_ln7_fu_372_p2;
reg   [0:0] or_ln7_reg_909;
reg   [0:0] or_ln7_reg_909_pp0_iter1_reg;
reg   [0:0] or_ln7_reg_909_pp0_iter2_reg;
reg   [0:0] or_ln7_reg_909_pp0_iter3_reg;
wire   [2:0] select_ln7_2_fu_386_p3;
reg   [2:0] select_ln7_2_reg_914;
wire   [2:0] select_ln7_3_fu_394_p3;
reg   [2:0] select_ln7_3_reg_920;
reg   [2:0] select_ln7_3_reg_920_pp0_iter1_reg;
reg   [2:0] select_ln7_3_reg_920_pp0_iter2_reg;
reg   [2:0] select_ln7_3_reg_920_pp0_iter3_reg;
reg   [2:0] select_ln7_3_reg_920_pp0_iter4_reg;
wire   [0:0] or_ln7_1_fu_408_p2;
reg   [0:0] or_ln7_1_reg_925;
wire   [0:0] and_ln7_2_fu_414_p2;
reg   [0:0] and_ln7_2_reg_931;
wire   [3:0] j_fu_420_p2;
reg   [3:0] j_reg_939;
wire   [3:0] select_ln14_fu_438_p3;
reg   [3:0] select_ln14_reg_945;
wire   [3:0] select_ln14_4_fu_446_p3;
reg   [3:0] select_ln14_4_reg_953;
wire   [3:0] i_fu_454_p2;
wire   [7:0] select_ln9_fu_466_p3;
wire   [9:0] select_ln7_6_fu_480_p3;
wire   [0:0] or_ln14_4_fu_719_p2;
reg   [0:0] or_ln14_4_reg_984;
reg   [0:0] or_ln14_4_reg_984_pp0_iter2_reg;
reg   [0:0] or_ln14_4_reg_984_pp0_iter3_reg;
reg  signed [31:0] a_load_reg_989;
reg  signed [31:0] b_load_reg_994;
wire   [31:0] mul_ln17_fu_725_p2;
reg   [31:0] mul_ln17_reg_999;
wire   [31:0] aux_2_fu_741_p3;
reg   [31:0] aux_2_reg_1004;
reg    ap_enable_reg_pp0_iter4;
wire   [30:0] select_ln19_1_fu_790_p3;
reg   [30:0] select_ln19_1_reg_1009;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter5;
reg   [2:0] ap_phi_mux_x_0_phi_fu_164_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_y_0_phi_fu_186_p4;
reg   [3:0] ap_phi_mux_j_0_phi_fu_208_p4;
reg   [31:0] ap_phi_mux_aux_phi_fu_219_p4;
wire  signed [63:0] sext_ln17_fu_657_p1;
wire  signed [63:0] sext_ln17_2_fu_690_p1;
wire  signed [63:0] sext_ln20_fu_835_p1;
wire   [3:0] zext_ln7_fu_238_p1;
wire   [2:0] x_fu_280_p2;
wire   [2:0] add_ln20_1_fu_308_p2;
wire   [2:0] add_ln20_fu_242_p2;
wire   [0:0] icmp_ln11_fu_342_p2;
wire   [0:0] icmp_ln9_fu_354_p2;
wire   [2:0] select_ln6_fu_292_p3;
wire   [2:0] select_ln6_3_fu_322_p3;
wire   [0:0] xor_ln7_fu_402_p2;
wire   [0:0] and_ln6_3_fu_348_p2;
wire   [3:0] select_ln7_fu_378_p3;
wire   [0:0] or_ln14_5_fu_426_p2;
wire   [0:0] or_ln14_6_fu_432_p2;
wire   [7:0] add_ln9_fu_460_p2;
wire   [9:0] add_ln7_1_fu_474_p2;
wire   [0:0] and_ln6_fu_491_p2;
wire   [0:0] icmp_ln14_2_fu_517_p2;
wire   [0:0] and_ln6_1_fu_495_p2;
wire   [0:0] and_ln6_2_fu_499_p2;
wire   [3:0] zext_ln7_3_fu_534_p1;
wire   [3:0] select_ln6_4_fu_503_p3;
wire   [3:0] zext_ln7_1_fu_509_p1;
wire   [3:0] sub_ln14_2_fu_544_p2;
wire   [0:0] tmp_6_fu_549_p3;
wire   [0:0] and_ln7_fu_512_p2;
wire   [0:0] icmp_ln14_3_fu_564_p2;
wire   [0:0] select_ln7_4_fu_522_p3;
wire   [0:0] icmp_ln14_6_fu_577_p2;
wire   [0:0] and_ln7_1_fu_529_p2;
wire   [3:0] select_ln7_5_fu_537_p3;
wire   [3:0] select_ln14_5_fu_592_p3;
wire   [3:0] zext_ln6_fu_488_p1;
wire  signed [3:0] sub_ln14_1_fu_603_p2;
wire   [4:0] tmp_4_fu_634_p3;
wire   [6:0] tmp_2_fu_627_p3;
wire   [6:0] zext_ln17_fu_641_p1;
wire   [6:0] zext_ln14_fu_589_p1;
wire   [6:0] sub_ln17_fu_645_p2;
wire   [6:0] add_ln17_fu_651_p2;
wire   [2:0] trunc_ln17_fu_666_p1;
wire   [4:0] zext_ln17_6_cast_fu_670_p3;
wire  signed [4:0] sext_ln17_1_fu_662_p1;
wire  signed [4:0] sext_ln14_fu_599_p1;
wire   [4:0] sub_ln17_1_fu_678_p2;
wire   [4:0] add_ln17_1_fu_684_p2;
wire   [0:0] select_ln14_2_fu_570_p3;
wire   [0:0] tmp_7_fu_608_p3;
wire   [0:0] or_ln14_fu_695_p2;
wire   [0:0] select_ln14_1_fu_557_p3;
wire   [0:0] icmp_ln14_5_fu_622_p2;
wire   [0:0] icmp_ln14_4_fu_616_p2;
wire   [0:0] or_ln14_2_fu_707_p2;
wire   [0:0] select_ln14_3_fu_582_p3;
wire   [0:0] or_ln14_3_fu_713_p2;
wire   [0:0] or_ln14_1_fu_701_p2;
wire   [31:0] select_ln7_1_fu_729_p3;
wire   [31:0] aux_1_fu_736_p2;
wire   [23:0] tmp_8_fu_752_p4;
wire   [0:0] icmp_ln19_fu_762_p2;
wire   [0:0] tmp_9_fu_768_p3;
wire   [0:0] or_ln19_fu_784_p2;
wire   [30:0] select_ln19_fu_776_p3;
wire   [30:0] trunc_ln17_1_fu_748_p1;
wire   [5:0] tmp_fu_798_p3;
wire   [3:0] tmp_1_fu_809_p3;
wire   [6:0] zext_ln20_fu_805_p1;
wire   [6:0] zext_ln20_1_fu_816_p1;
wire   [6:0] zext_ln7_2_fu_826_p1;
wire   [6:0] sub_ln20_fu_820_p2;
wire   [6:0] add_ln20_2_fu_829_p2;
wire    ap_CS_fsm_state8;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
 ap_CS_fsm = 3'd1;
 ap_enable_reg_pp0_iter0 = 1'b0;
 ap_enable_reg_pp0_iter4 = 1'b0;
 ap_enable_reg_pp0_iter1 = 1'b0;
 ap_enable_reg_pp0_iter2 = 1'b0;
 ap_enable_reg_pp0_iter3 = 1'b0;
 ap_enable_reg_pp0_iter5 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_reg_859_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        aux_reg_215 <= aux_2_reg_1004;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        aux_reg_215 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_268_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_227 <= i_fu_454_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_227 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_268_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten26_reg_171 <= select_ln7_6_fu_480_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten26_reg_171 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_268_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten66_reg_149 <= add_ln6_fu_274_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten66_reg_149 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_268_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_193 <= select_ln9_fu_466_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_193 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_0_reg_204 <= select_ln14_4_reg_953;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_204 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        x_0_reg_160 <= select_ln6_1_reg_873;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_reg_160 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        y_0_reg_182 <= select_ln7_2_reg_914;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_0_reg_182 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_reg_859_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_load_reg_989 <= a_q0;
        b_load_reg_994 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_268_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln6_4_reg_897 <= and_ln6_4_fu_360_p2;
        and_ln7_2_reg_931 <= and_ln7_2_fu_414_p2;
        icmp_ln14_1_reg_892 <= icmp_ln14_1_fu_336_p2;
        icmp_ln7_reg_868 <= icmp_ln7_fu_286_p2;
        j_reg_939 <= j_fu_420_p2;
        or_ln7_1_reg_925 <= or_ln7_1_fu_408_p2;
        or_ln7_reg_909 <= or_ln7_fu_372_p2;
        select_ln14_reg_945 <= select_ln14_fu_438_p3;
        select_ln6_2_reg_879 <= select_ln6_2_fu_314_p3;
        select_ln7_3_reg_920 <= select_ln7_3_fu_394_p3;
        xor_ln6_reg_885 <= xor_ln6_fu_330_p2;
        y_reg_903 <= y_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_reg_859_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        aux_2_reg_1004 <= aux_2_fu_741_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln14_reg_854 <= icmp_ln14_fu_262_p2;
        icmp_ln6_reg_859 <= icmp_ln6_fu_268_p2;
        icmp_ln6_reg_859_pp0_iter1_reg <= icmp_ln6_reg_859;
        or_ln7_reg_909_pp0_iter1_reg <= or_ln7_reg_909;
        select_ln6_2_reg_879_pp0_iter1_reg <= select_ln6_2_reg_879;
        select_ln7_3_reg_920_pp0_iter1_reg <= select_ln7_3_reg_920;
        sub_ln14_reg_844 <= sub_ln14_fu_248_p2;
        tmp_5_reg_849 <= sub_ln14_fu_248_p2[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln6_reg_859_pp0_iter2_reg <= icmp_ln6_reg_859_pp0_iter1_reg;
        icmp_ln6_reg_859_pp0_iter3_reg <= icmp_ln6_reg_859_pp0_iter2_reg;
        icmp_ln6_reg_859_pp0_iter4_reg <= icmp_ln6_reg_859_pp0_iter3_reg;
        or_ln14_4_reg_984_pp0_iter2_reg <= or_ln14_4_reg_984;
        or_ln14_4_reg_984_pp0_iter3_reg <= or_ln14_4_reg_984_pp0_iter2_reg;
        or_ln7_reg_909_pp0_iter2_reg <= or_ln7_reg_909_pp0_iter1_reg;
        or_ln7_reg_909_pp0_iter3_reg <= or_ln7_reg_909_pp0_iter2_reg;
        select_ln6_2_reg_879_pp0_iter2_reg <= select_ln6_2_reg_879_pp0_iter1_reg;
        select_ln6_2_reg_879_pp0_iter3_reg <= select_ln6_2_reg_879_pp0_iter2_reg;
        select_ln6_2_reg_879_pp0_iter4_reg <= select_ln6_2_reg_879_pp0_iter3_reg;
        select_ln7_3_reg_920_pp0_iter2_reg <= select_ln7_3_reg_920_pp0_iter1_reg;
        select_ln7_3_reg_920_pp0_iter3_reg <= select_ln7_3_reg_920_pp0_iter2_reg;
        select_ln7_3_reg_920_pp0_iter4_reg <= select_ln7_3_reg_920_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln14_4_reg_984_pp0_iter2_reg == 1'd0) & (icmp_ln6_reg_859_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln17_reg_999 <= mul_ln17_fu_725_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln14_4_reg_984 <= or_ln14_4_fu_719_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_268_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln14_4_reg_953 <= select_ln14_4_fu_446_p3;
        select_ln6_1_reg_873 <= select_ln6_1_fu_300_p3;
        select_ln7_2_reg_914 <= select_ln7_2_fu_386_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_reg_859_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln19_1_reg_1009 <= select_ln19_1_fu_790_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln6_fu_268_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_reg_859_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        ap_phi_mux_aux_phi_fu_219_p4 = aux_2_reg_1004;
    end else begin
        ap_phi_mux_aux_phi_fu_219_p4 = aux_reg_215;
    end
end

always @ (*) begin
    if (((icmp_ln6_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j_0_phi_fu_208_p4 = select_ln14_4_reg_953;
    end else begin
        ap_phi_mux_j_0_phi_fu_208_p4 = j_0_reg_204;
    end
end

always @ (*) begin
    if (((icmp_ln6_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_x_0_phi_fu_164_p4 = select_ln6_1_reg_873;
    end else begin
        ap_phi_mux_x_0_phi_fu_164_p4 = x_0_reg_160;
    end
end

always @ (*) begin
    if (((icmp_ln6_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_y_0_phi_fu_186_p4 = select_ln7_2_reg_914;
    end else begin
        ap_phi_mux_y_0_phi_fu_186_p4 = y_0_reg_182;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_reg_859_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        c_we0 = 1'b1;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln6_fu_268_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln6_fu_268_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = sext_ln17_fu_657_p1;

assign add_ln17_1_fu_684_p2 = ($signed(sext_ln14_fu_599_p1) + $signed(sub_ln17_1_fu_678_p2));

assign add_ln17_fu_651_p2 = (zext_ln14_fu_589_p1 + sub_ln17_fu_645_p2);

assign add_ln20_1_fu_308_p2 = ($signed(3'd7) + $signed(ap_phi_mux_x_0_phi_fu_164_p4));

assign add_ln20_2_fu_829_p2 = (zext_ln7_2_fu_826_p1 + sub_ln20_fu_820_p2);

assign add_ln20_fu_242_p2 = ($signed(ap_phi_mux_y_0_phi_fu_186_p4) + $signed(3'd7));

assign add_ln6_fu_274_p2 = (indvar_flatten66_reg_149 + 12'd1);

assign add_ln7_1_fu_474_p2 = (10'd1 + indvar_flatten26_reg_171);

assign add_ln9_fu_460_p2 = (8'd1 + indvar_flatten_reg_193);

assign and_ln6_1_fu_495_p2 = (xor_ln6_reg_885 & icmp_ln14_reg_854);

assign and_ln6_2_fu_499_p2 = (xor_ln6_reg_885 & icmp_ln14_1_reg_892);

assign and_ln6_3_fu_348_p2 = (xor_ln6_fu_330_p2 & icmp_ln11_fu_342_p2);

assign and_ln6_4_fu_360_p2 = (xor_ln6_fu_330_p2 & icmp_ln9_fu_354_p2);

assign and_ln6_fu_491_p2 = (xor_ln6_reg_885 & tmp_5_reg_849);

assign and_ln7_1_fu_529_p2 = (or_ln7_1_reg_925 & and_ln6_2_fu_499_p2);

assign and_ln7_2_fu_414_p2 = (or_ln7_1_fu_408_p2 & and_ln6_3_fu_348_p2);

assign and_ln7_fu_512_p2 = (or_ln7_1_reg_925 & and_ln6_fu_491_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign aux_1_fu_736_p2 = (mul_ln17_reg_999 + select_ln7_1_fu_729_p3);

assign aux_2_fu_741_p3 = ((or_ln14_4_reg_984_pp0_iter3_reg[0:0] === 1'b1) ? select_ln7_1_fu_729_p3 : aux_1_fu_736_p2);

assign b_address0 = sext_ln17_2_fu_690_p1;

assign c_address0 = sext_ln20_fu_835_p1;

assign c_d0 = select_ln19_1_reg_1009;

assign i_fu_454_p2 = (4'd1 + select_ln14_fu_438_p3);

assign icmp_ln11_fu_342_p2 = ((i_0_reg_227 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln14_1_fu_336_p2 = ((ap_phi_mux_j_0_phi_fu_208_p4 > 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln14_2_fu_517_p2 = ((y_reg_903 > 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln14_3_fu_564_p2 = (($signed(sub_ln14_2_fu_544_p2) > $signed(4'd2)) ? 1'b1 : 1'b0);

assign icmp_ln14_4_fu_616_p2 = (($signed(sub_ln14_1_fu_603_p2) > $signed(4'd2)) ? 1'b1 : 1'b0);

assign icmp_ln14_5_fu_622_p2 = ((select_ln14_reg_945 > 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln14_6_fu_577_p2 = ((j_reg_939 > 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_262_p2 = (($signed(sub_ln14_fu_248_p2) > $signed(4'd2)) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_762_p2 = (($signed(tmp_8_fu_752_p4) > $signed(24'd0)) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_268_p2 = ((indvar_flatten66_reg_149 == 12'd2304) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_286_p2 = ((indvar_flatten26_reg_171 == 10'd384) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_354_p2 = ((indvar_flatten_reg_193 == 8'd64) ? 1'b1 : 1'b0);

assign j_fu_420_p2 = (4'd1 + select_ln7_fu_378_p3);

assign mul_ln17_fu_725_p2 = ($signed(b_load_reg_994) * $signed(a_load_reg_989));

assign or_ln14_1_fu_701_p2 = (select_ln14_1_fu_557_p3 | or_ln14_fu_695_p2);

assign or_ln14_2_fu_707_p2 = (icmp_ln14_5_fu_622_p2 | icmp_ln14_4_fu_616_p2);

assign or_ln14_3_fu_713_p2 = (select_ln14_3_fu_582_p3 | or_ln14_2_fu_707_p2);

assign or_ln14_4_fu_719_p2 = (or_ln14_3_fu_713_p2 | or_ln14_1_fu_701_p2);

assign or_ln14_5_fu_426_p2 = (and_ln7_2_fu_414_p2 | and_ln6_4_fu_360_p2);

assign or_ln14_6_fu_432_p2 = (or_ln14_5_fu_426_p2 | icmp_ln7_fu_286_p2);

assign or_ln14_fu_695_p2 = (tmp_7_fu_608_p3 | select_ln14_2_fu_570_p3);

assign or_ln19_fu_784_p2 = (tmp_9_fu_768_p3 | icmp_ln19_fu_762_p2);

assign or_ln7_1_fu_408_p2 = (xor_ln7_fu_402_p2 | icmp_ln7_fu_286_p2);

assign or_ln7_fu_372_p2 = (icmp_ln7_fu_286_p2 | and_ln6_4_fu_360_p2);

assign select_ln14_1_fu_557_p3 = ((and_ln7_2_reg_931[0:0] === 1'b1) ? tmp_6_fu_549_p3 : and_ln7_fu_512_p2);

assign select_ln14_2_fu_570_p3 = ((and_ln7_2_reg_931[0:0] === 1'b1) ? icmp_ln14_3_fu_564_p2 : select_ln7_4_fu_522_p3);

assign select_ln14_3_fu_582_p3 = ((and_ln7_2_reg_931[0:0] === 1'b1) ? icmp_ln14_6_fu_577_p2 : and_ln7_1_fu_529_p2);

assign select_ln14_4_fu_446_p3 = ((and_ln7_2_fu_414_p2[0:0] === 1'b1) ? j_fu_420_p2 : select_ln7_fu_378_p3);

assign select_ln14_5_fu_592_p3 = ((and_ln7_2_reg_931[0:0] === 1'b1) ? sub_ln14_2_fu_544_p2 : select_ln7_5_fu_537_p3);

assign select_ln14_fu_438_p3 = ((or_ln14_6_fu_432_p2[0:0] === 1'b1) ? 4'd0 : i_0_reg_227);

assign select_ln19_1_fu_790_p3 = ((or_ln19_fu_784_p2[0:0] === 1'b1) ? select_ln19_fu_776_p3 : trunc_ln17_1_fu_748_p1);

assign select_ln19_fu_776_p3 = ((icmp_ln19_fu_762_p2[0:0] === 1'b1) ? 31'd255 : 31'd0);

assign select_ln6_1_fu_300_p3 = ((icmp_ln7_fu_286_p2[0:0] === 1'b1) ? x_fu_280_p2 : ap_phi_mux_x_0_phi_fu_164_p4);

assign select_ln6_2_fu_314_p3 = ((icmp_ln7_fu_286_p2[0:0] === 1'b1) ? ap_phi_mux_x_0_phi_fu_164_p4 : add_ln20_1_fu_308_p2);

assign select_ln6_3_fu_322_p3 = ((icmp_ln7_fu_286_p2[0:0] === 1'b1) ? 3'd0 : add_ln20_fu_242_p2);

assign select_ln6_4_fu_503_p3 = ((icmp_ln7_reg_868[0:0] === 1'b1) ? 4'd1 : sub_ln14_reg_844);

assign select_ln6_fu_292_p3 = ((icmp_ln7_fu_286_p2[0:0] === 1'b1) ? 3'd1 : ap_phi_mux_y_0_phi_fu_186_p4);

assign select_ln7_1_fu_729_p3 = ((or_ln7_reg_909_pp0_iter3_reg[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_aux_phi_fu_219_p4);

assign select_ln7_2_fu_386_p3 = ((and_ln6_4_fu_360_p2[0:0] === 1'b1) ? y_fu_366_p2 : select_ln6_fu_292_p3);

assign select_ln7_3_fu_394_p3 = ((and_ln6_4_fu_360_p2[0:0] === 1'b1) ? select_ln6_fu_292_p3 : select_ln6_3_fu_322_p3);

assign select_ln7_4_fu_522_p3 = ((and_ln6_4_reg_897[0:0] === 1'b1) ? icmp_ln14_2_fu_517_p2 : and_ln6_1_fu_495_p2);

assign select_ln7_5_fu_537_p3 = ((and_ln6_4_reg_897[0:0] === 1'b1) ? zext_ln7_3_fu_534_p1 : select_ln6_4_fu_503_p3);

assign select_ln7_6_fu_480_p3 = ((icmp_ln7_fu_286_p2[0:0] === 1'b1) ? 10'd1 : add_ln7_1_fu_474_p2);

assign select_ln7_fu_378_p3 = ((or_ln7_fu_372_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_j_0_phi_fu_208_p4);

assign select_ln9_fu_466_p3 = ((or_ln7_fu_372_p2[0:0] === 1'b1) ? 8'd1 : add_ln9_fu_460_p2);

assign sext_ln14_fu_599_p1 = $signed(select_ln14_5_fu_592_p3);

assign sext_ln17_1_fu_662_p1 = sub_ln14_1_fu_603_p2;

assign sext_ln17_2_fu_690_p1 = $signed(add_ln17_1_fu_684_p2);

assign sext_ln17_fu_657_p1 = $signed(add_ln17_fu_651_p2);

assign sext_ln20_fu_835_p1 = $signed(add_ln20_2_fu_829_p2);

assign sub_ln14_1_fu_603_p2 = (zext_ln6_fu_488_p1 - select_ln14_reg_945);

assign sub_ln14_2_fu_544_p2 = (zext_ln7_1_fu_509_p1 - j_reg_939);

assign sub_ln14_fu_248_p2 = (zext_ln7_fu_238_p1 - ap_phi_mux_j_0_phi_fu_208_p4);

assign sub_ln17_1_fu_678_p2 = ($signed(zext_ln17_6_cast_fu_670_p3) - $signed(sext_ln17_1_fu_662_p1));

assign sub_ln17_fu_645_p2 = (tmp_2_fu_627_p3 - zext_ln17_fu_641_p1);

assign sub_ln20_fu_820_p2 = (zext_ln20_fu_805_p1 - zext_ln20_1_fu_816_p1);

assign tmp_1_fu_809_p3 = {{select_ln6_2_reg_879_pp0_iter4_reg}, {1'd0}};

assign tmp_2_fu_627_p3 = {{select_ln14_reg_945}, {3'd0}};

assign tmp_4_fu_634_p3 = {{select_ln14_reg_945}, {1'd0}};

assign tmp_6_fu_549_p3 = sub_ln14_2_fu_544_p2[32'd3];

assign tmp_7_fu_608_p3 = sub_ln14_1_fu_603_p2[32'd3];

assign tmp_8_fu_752_p4 = {{aux_2_fu_741_p3[31:8]}};

assign tmp_9_fu_768_p3 = aux_2_fu_741_p3[32'd31];

assign tmp_fu_798_p3 = {{select_ln6_2_reg_879_pp0_iter4_reg}, {3'd0}};

assign trunc_ln17_1_fu_748_p1 = aux_2_fu_741_p3[30:0];

assign trunc_ln17_fu_666_p1 = sub_ln14_1_fu_603_p2[2:0];

assign x_fu_280_p2 = (3'd1 + ap_phi_mux_x_0_phi_fu_164_p4);

assign xor_ln6_fu_330_p2 = (icmp_ln7_fu_286_p2 ^ 1'd1);

assign xor_ln7_fu_402_p2 = (icmp_ln9_fu_354_p2 ^ 1'd1);

assign y_fu_366_p2 = (3'd1 + select_ln6_fu_292_p3);

assign zext_ln14_fu_589_p1 = select_ln14_4_reg_953;

assign zext_ln17_6_cast_fu_670_p3 = {{trunc_ln17_fu_666_p1}, {2'd0}};

assign zext_ln17_fu_641_p1 = tmp_4_fu_634_p3;

assign zext_ln20_1_fu_816_p1 = tmp_1_fu_809_p3;

assign zext_ln20_fu_805_p1 = tmp_fu_798_p3;

assign zext_ln6_fu_488_p1 = select_ln6_1_reg_873;

assign zext_ln7_1_fu_509_p1 = select_ln7_2_reg_914;

assign zext_ln7_2_fu_826_p1 = select_ln7_3_reg_920_pp0_iter4_reg;

assign zext_ln7_3_fu_534_p1 = y_reg_903;

assign zext_ln7_fu_238_p1 = ap_phi_mux_y_0_phi_fu_186_p4;

endmodule //core
